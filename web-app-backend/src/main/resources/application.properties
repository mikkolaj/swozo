server.port=5000
react.dev.server.url=${WEB_SERVER_URL}
orchestrator.server.url=${ORCHESTRATOR_URL}

# database for web app-related data
spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=jdbc:postgresql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_NAME}
spring.datasource.username=${DATABASE_USER}
spring.datasource.password=${DATABASE_PASSWORD}
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
database.enable-bootstrapping=${ENABLE_BOOTSTRAPPING}

# keys
jwt-secret-key=${JWT_SIGNATURE_SECRET_KEY}
# same one must be configured for orchestrator
orchestrator.secret=${ORCHESTRATOR_SECRET_KEY}
orchestrator.cache.revalidate.serviceConfig=PT30M

jwt-default-expiration-seconds=3600
refresh-token-default-expiration-seconds=86400

# jackson
spring.jackson.default-property-inclusion=non_absent

# storage
storage.provider=gcloud
# duration specifying after what time signed urls should expire (7 days is max for gcp), internal is for
# usage within secured services like orchestrator, external for the other ones like frontend
storage.internal-download-validity=P7D
storage.internal-upload-validity=P7D
storage.external-download-validity=PT12H
storage.external-upload-validity=PT1H
storage.web-bucket.name=${GCP_WEB_BUCKET_NAME}
storage.web-bucket.cors-allowed-origins=${react.dev.server.url}

# Google Cloud
gcp.storage.project=${GCP_PROJECT}
gcp.storage.zone=${GCP_ZONE}

# email
email.sender=noreply@swozo.com
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${EMAIL_USERNAME:#{'this-wont-work-but-wont-throw-errors@gmail.com'}}
spring.mail.password=${EMAIL_PASSWORD:#{'same-here'}}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true

# admin
initial-admin.email=${INITIAL_ADMIN_EMAIL}
initial-admin.name=${INITIAL_ADMIN_NAME}
initial-admin.surname=${INITIAL_ADMIN_SURNAME}

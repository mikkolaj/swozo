openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:5000
  description: Generated server url
paths:
  /service-modules:
    put:
      tags:
      - service-module-controller
      operationId: finishServiceModuleCreation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FinishServiceModuleCreationRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceModuleDetailsDto'
      security:
      - JWT_AUTH: []
    post:
      tags:
      - service-module-controller
      operationId: initServiceModuleCreation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReserveServiceModuleRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceModuleReservationDto'
      security:
      - JWT_AUTH: []
  /service-modules/{serviceModuleId}/edit/service-config/init:
    put:
      tags:
      - service-module-controller
      operationId: initServiceConfigUpdate
      parameters:
      - name: serviceModuleId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReserveServiceModuleRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: object
      security:
      - JWT_AUTH: []
  /service-modules/{serviceModuleId}/edit/service-config/finish:
    put:
      tags:
      - service-module-controller
      operationId: finishServiceConfigUpdate
      parameters:
      - name: serviceModuleId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FinishServiceModuleCreationRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceModuleDetailsDto'
      security:
      - JWT_AUTH: []
  /service-modules/{serviceModuleId}/edit/common:
    put:
      tags:
      - service-module-controller
      operationId: updateCommonData
      parameters:
      - name: serviceModuleId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReserveServiceModuleRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceModuleDetailsDto'
      security:
      - JWT_AUTH: []
  /courses/{id}/activities:
    put:
      tags:
      - course-controller
      operationId: addSingleActivity
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateActivityRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CourseDetailsDto'
      security:
      - JWT_AUTH: []
  /courses/{courseId}/students:
    put:
      tags:
      - course-controller
      operationId: addStudentToCourse
      parameters:
      - name: courseId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyParticipantRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CourseDetailsDto'
      security:
      - JWT_AUTH: []
    delete:
      tags:
      - course-controller
      operationId: removeStudentFromCourse
      parameters:
      - name: courseId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyParticipantRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CourseDetailsDto'
      security:
      - JWT_AUTH: []
  /courses/join:
    put:
      tags:
      - course-controller
      operationId: joinCourse
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JoinCourseRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CourseDetailsDto'
      security:
      - JWT_AUTH: []
  /activities/{activityId}/files:
    put:
      tags:
      - activity-controller
      operationId: ackPublicActivityFileUpload
      parameters:
      - name: activityId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadAccessDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActivityDetailsDto'
      security:
      - JWT_AUTH: []
    post:
      tags:
      - activity-controller
      operationId: preparePublicActivityFileUpload
      parameters:
      - name: activityId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitFileUploadRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StorageAccessRequest'
      security:
      - JWT_AUTH: []
  /sandbox/{serviceModuleId}:
    post:
      tags:
      - sandbox-controller
      operationId: createServiceModuleTestingEnvironment
      parameters:
      - name: serviceModuleId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSandboxEnvironmentRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceModuleSandboxDto'
      security:
      - JWT_AUTH: []
  /courses:
    get:
      tags:
      - course-controller
      operationId: getUserCourses
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseDetailsDto'
      security:
      - JWT_AUTH: []
    post:
      tags:
      - course-controller
      operationId: addCourse
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCourseRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CourseDetailsDto'
      security:
      - JWT_AUTH: []
  /auth/login:
    post:
      tags:
      - auth-controller
      summary: Login user
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthDetailsDto'
  /courses/{id}:
    get:
      tags:
      - course-controller
      operationId: getCourse
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CourseDetailsDto'
      security:
      - JWT_AUTH: []
    delete:
      tags:
      - course-controller
      operationId: deleteCourse
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
      security:
      - JWT_AUTH: []
    patch:
      tags:
      - course-controller
      operationId: editCourse
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditCourseRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CourseDetailsDto'
      security:
      - JWT_AUTH: []
  /users/me:
    get:
      tags:
      - user-controller
      operationId: getUserInfo
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDetailsDto'
      security:
      - JWT_AUTH: []
  /service-modules/{serviceModuleId}:
    get:
      tags:
      - service-module-controller
      operationId: getServiceModule
      parameters:
      - name: serviceModuleId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceModuleDetailsDto'
      security:
      - JWT_AUTH: []
    delete:
      tags:
      - service-module-controller
      operationId: deleteServiceModule
      parameters:
      - name: serviceModuleId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceModuleDetailsDto'
      security:
      - JWT_AUTH: []
  /service-modules/{serviceModuleId}/summary:
    get:
      tags:
      - service-module-controller
      operationId: getServiceModuleSummary
      parameters:
      - name: serviceModuleId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceModuleSummaryDto'
      security:
      - JWT_AUTH: []
  /service-modules/{serviceModuleId}/edit:
    get:
      tags:
      - service-module-controller
      operationId: getFormDataForEdit
      parameters:
      - name: serviceModuleId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ReserveServiceModuleRequest'
      security:
      - JWT_AUTH: []
  /service-modules/user/summary:
    get:
      tags:
      - service-module-controller
      operationId: getUserModulesSummary
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceModuleSummaryDto'
      security:
      - JWT_AUTH: []
  /service-modules/usage/{serviceModuleId}:
    get:
      tags:
      - service-module-controller
      operationId: getUsage
      parameters:
      - name: serviceModuleId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: offset
        in: query
        required: false
        schema:
          type: integer
          format: int64
          default: 0
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          format: int64
          default: 100
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceModuleUsageDto'
      security:
      - JWT_AUTH: []
  /service-modules/summary:
    get:
      tags:
      - service-module-controller
      operationId: getAllPublicServiceModules
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceModuleSummaryDto'
      security:
      - JWT_AUTH: []
  /service-modules/config:
    get:
      tags:
      - service-module-controller
      operationId: getSupportedServices
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceConfig'
      security:
      - JWT_AUTH: []
  /files/external/download/{remoteFileId}:
    get:
      tags:
      - file-controller
      operationId: getDownloadSignedAccessRequestExternal
      parameters:
      - name: remoteFileId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StorageAccessRequest'
      security:
      - JWT_AUTH: []
  /courses/summary:
    get:
      tags:
      - course-controller
      operationId: getPublicCourses
      parameters:
      - name: offset
        in: query
        required: false
        schema:
          type: integer
          format: int64
          default: 0
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          format: int64
          default: 100
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseSummaryDto'
      security:
      - JWT_AUTH: []
  /courses/summary/{uuid}:
    get:
      tags:
      - course-controller
      operationId: getPublicCourseData
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CourseSummaryDto'
      security:
      - JWT_AUTH: []
  /activities/{activityId}/files/{fileId}:
    get:
      tags:
      - activity-controller
      operationId: getPublicActivityFileDownloadRequest
      parameters:
      - name: activityId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: fileId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StorageAccessRequest'
      security:
      - JWT_AUTH: []
components:
  schemas:
    FinishServiceModuleCreationRequest:
      required:
      - echoFieldActions
      - finalDynamicFieldValues
      - repeatedInitialValues
      - reservationId
      type: object
      properties:
        reservationId:
          type: integer
          format: int64
        echoFieldActions:
          type: object
          additionalProperties:
            type: string
        repeatedInitialValues:
          type: object
          additionalProperties:
            type: string
        finalDynamicFieldValues:
          type: object
          additionalProperties:
            type: string
    DynamicFieldDto:
      required:
      - parameterDescription
      - value
      type: object
      properties:
        value:
          type: string
        parameterDescription:
          $ref: '#/components/schemas/ParameterDescription'
    InstructionDto:
      required:
      - untrustedPossiblyDangerousHtml
      type: object
      properties:
        untrustedPossiblyDangerousHtml:
          type: string
    ParameterDescription:
      required:
      - name
      - required
      - type
      type: object
      properties:
        name:
          type: string
        required:
          type: boolean
        type:
          type: string
          enum:
          - FILE
          - TEXT
        translatedLabel:
          type: object
          additionalProperties:
            type: string
        clientValidationHelpers:
          type: object
          additionalProperties:
            type: object
    ServiceModuleDetailsDto:
      required:
      - createdAt
      - creator
      - description
      - dynamicFields
      - id
      - isPublic
      - name
      - serviceName
      - studentInstruction
      - subject
      - teacherInstruction
      - usedInActivitiesCount
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        subject:
          type: string
        description:
          type: string
        serviceName:
          type: string
        teacherInstruction:
          $ref: '#/components/schemas/InstructionDto'
        studentInstruction:
          $ref: '#/components/schemas/InstructionDto'
        creator:
          $ref: '#/components/schemas/UserDetailsDto'
        createdAt:
          type: string
          format: date-time
        usedInActivitiesCount:
          type: integer
          format: int32
        isPublic:
          type: boolean
        dynamicFields:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DynamicFieldDto'
    UserDetailsDto:
      required:
      - email
      - name
      - surname
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        email:
          type: string
    ReserveServiceModuleRequest:
      required:
      - description
      - dynamicProperties
      - isIsolated
      - isPublic
      - name
      - scheduleTypeName
      - studentInstruction
      - subject
      - teacherInstruction
      type: object
      properties:
        name:
          type: string
        subject:
          type: string
        description:
          type: string
        teacherInstruction:
          $ref: '#/components/schemas/InstructionDto'
        studentInstruction:
          $ref: '#/components/schemas/InstructionDto'
        scheduleTypeName:
          type: string
        dynamicProperties:
          type: object
          additionalProperties:
            type: string
        isPublic:
          type: boolean
        isIsolated:
          type: boolean
    CreateActivityRequest:
      required:
      - description
      - endTime
      - instructionFromTeacher
      - name
      - selectedModulesIds
      - startTime
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        instructionFromTeacher:
          $ref: '#/components/schemas/InstructionDto'
        selectedModulesIds:
          type: array
          items:
            type: integer
            format: int64
    ActivityDetailsDto:
      required:
      - activityModules
      - description
      - endTime
      - id
      - instructionFromTeacher
      - name
      - publicFiles
      - startTime
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        instructionFromTeacher:
          $ref: '#/components/schemas/InstructionDto'
        activityModules:
          type: array
          items:
            $ref: '#/components/schemas/ActivityModuleDetailsDto'
        publicFiles:
          type: array
          items:
            $ref: '#/components/schemas/FileDto'
    ActivityModuleDetailsDto:
      required:
      - connectionDetails
      - id
      - serviceModule
      type: object
      properties:
        id:
          type: integer
          format: int64
        serviceModule:
          $ref: '#/components/schemas/ServiceModuleSummaryDto'
        connectionDetails:
          type: array
          items:
            $ref: '#/components/schemas/ServiceConnectionDetailsDto'
    CourseDetailsDto:
      required:
      - activities
      - description
      - id
      - isPublic
      - joinUUID
      - lastActivityTime
      - name
      - students
      - subject
      - teacher
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        teacher:
          $ref: '#/components/schemas/UserDetailsDto'
        lastActivityTime:
          type: string
          format: date-time
        subject:
          type: string
        description:
          type: string
        students:
          type: array
          items:
            $ref: '#/components/schemas/ParticipantDetailsDto'
        activities:
          type: array
          items:
            $ref: '#/components/schemas/ActivityDetailsDto'
        joinUUID:
          type: string
        isPublic:
          type: boolean
        coursePassword:
          type: string
    FileDto:
      required:
      - createdAt
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        createdAt:
          type: string
          format: date-time
    ParticipantDetailsDto:
      required:
      - joinedAt
      - participant
      type: object
      properties:
        participant:
          $ref: '#/components/schemas/UserDetailsDto'
        joinedAt:
          type: string
          format: date-time
    ServiceConnectionDetailsDto:
      required:
      - connectionInstructions
      - url
      type: object
      properties:
        connectionInstructions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/InstructionDto'
        url:
          type: string
    ServiceModuleSummaryDto:
      required:
      - createdAt
      - creator
      - description
      - id
      - name
      - serviceName
      - studentInstruction
      - subject
      - teacherInstruction
      - usedInActivitiesCount
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        subject:
          type: string
        description:
          type: string
        serviceName:
          type: string
        teacherInstruction:
          $ref: '#/components/schemas/InstructionDto'
        studentInstruction:
          $ref: '#/components/schemas/InstructionDto'
        creator:
          $ref: '#/components/schemas/UserDetailsDto'
        createdAt:
          type: string
          format: date-time
        usedInActivitiesCount:
          type: integer
          format: int32
    ModifyParticipantRequest:
      required:
      - email
      type: object
      properties:
        email:
          type: string
    JoinCourseRequest:
      required:
      - joinUUID
      type: object
      properties:
        joinUUID:
          type: string
        password:
          type: string
    InitFileUploadRequest:
      required:
      - filename
      - sizeBytes
      type: object
      properties:
        filename:
          type: string
        sizeBytes:
          type: integer
          format: int64
    StorageAccessRequest:
      required:
      - filePath
      - httpHeaders
      - httpMethod
      - provider
      - signedUrl
      - validTo
      type: object
      properties:
        provider:
          type: string
          enum:
          - gcloud
        filePath:
          type: string
        signedUrl:
          type: string
        validTo:
          type: string
          format: date-time
        httpMethod:
          type: string
        httpHeaders:
          type: object
          additionalProperties:
            type: string
    UploadAccessDto:
      required:
      - initFileUploadRequest
      - storageAccessRequest
      type: object
      properties:
        initFileUploadRequest:
          $ref: '#/components/schemas/InitFileUploadRequest'
        storageAccessRequest:
          $ref: '#/components/schemas/StorageAccessRequest'
    ServiceModuleReservationDto:
      required:
      - dynamicFieldAdditionalActions
      - reservationId
      type: object
      properties:
        reservationId:
          type: integer
          format: int64
        dynamicFieldAdditionalActions:
          type: object
          additionalProperties:
            type: object
    CreateSandboxEnvironmentRequest:
      required:
      - resultsValidForMinutes
      - studentCount
      - validForMinutes
      type: object
      properties:
        studentCount:
          type: integer
          format: int32
        validForMinutes:
          type: integer
          format: int32
        resultsValidForMinutes:
          type: integer
          format: int32
    SandboxUserDetailsDto:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    ServiceModuleSandboxDto:
      required:
      - courseDetailsDto
      - sandboxStudents
      - validTo
      type: object
      properties:
        courseDetailsDto:
          $ref: '#/components/schemas/CourseDetailsDto'
        sandboxStudents:
          type: array
          items:
            $ref: '#/components/schemas/SandboxUserDetailsDto'
        validTo:
          type: string
          format: date-time
    CreateCourseRequest:
      required:
      - activities
      - description
      - expectedStudentCount
      - isPublic
      - name
      - subject
      type: object
      properties:
        name:
          type: string
        subject:
          type: string
        description:
          type: string
        expectedStudentCount:
          type: integer
          format: int32
        isPublic:
          type: boolean
        activities:
          type: array
          items:
            $ref: '#/components/schemas/CreateActivityRequest'
        password:
          type: string
    LoginRequest:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    AuthDetailsDto:
      required:
      - accessToken
      - expiresIn
      - roles
      type: object
      properties:
        accessToken:
          type: string
        expiresIn:
          type: integer
          format: int64
        roles:
          type: array
          items:
            type: string
            enum:
            - STUDENT
            - TEACHER
            - TECHNICAL_TEACHER
            - ADMIN
    EditCourseRequest:
      type: object
      properties:
        name:
          type: string
        subject:
          type: string
        description:
          type: string
        password:
          type: string
        isPublic:
          type: boolean
    ServiceModuleUsageDto:
      required:
      - activityName
      - addedAt
      - courseCreator
      - courseId
      - courseName
      type: object
      properties:
        courseCreator:
          $ref: '#/components/schemas/UserDetailsDto'
        courseId:
          type: integer
          format: int64
        courseName:
          type: string
        activityName:
          type: string
        addedAt:
          type: string
          format: date-time
    ServiceConfig:
      required:
      - parameterDescriptions
      - serviceName
      type: object
      properties:
        serviceName:
          type: string
        parameterDescriptions:
          type: array
          items:
            $ref: '#/components/schemas/ParameterDescription'
    CourseSummaryDto:
      required:
      - creationTime
      - description
      - isPasswordProtected
      - joinUUID
      - name
      - subject
      - teacher
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        subject:
          type: string
        creationTime:
          type: string
          format: date-time
        teacher:
          $ref: '#/components/schemas/UserDetailsDto'
        isPasswordProtected:
          type: boolean
        joinUUID:
          type: string
  securitySchemes:
    JWT_AUTH:
      type: http
      scheme: bearer
      bearerFormat: JWT
